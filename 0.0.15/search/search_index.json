{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to ShopEat! What is ShopEat? Shopeat is an application that helps you plan the recipes you want to cook, create shopping lists, and do online shopping with your friends or family. It allows you to easily plan your meals and save time and money by organizing your shopping in an efficient way. You can use the app to choose recipes based on your preferences and dietary needs, and then generate a shopping list based on the required ingredients. You can also invite your friends or family to join and contribute to the shopping list, which can be convenient when organizing shared meals or when you want to share the shopping tasks. What does ShopEat looks like? Coming soon...","title":"Welcome to ShopEat!"},{"location":"#welcome-to-shopeat","text":"","title":"Welcome to ShopEat!"},{"location":"#what-is-shopeat","text":"Shopeat is an application that helps you plan the recipes you want to cook, create shopping lists, and do online shopping with your friends or family. It allows you to easily plan your meals and save time and money by organizing your shopping in an efficient way. You can use the app to choose recipes based on your preferences and dietary needs, and then generate a shopping list based on the required ingredients. You can also invite your friends or family to join and contribute to the shopping list, which can be convenient when organizing shared meals or when you want to share the shopping tasks.","title":"What is ShopEat?"},{"location":"#what-does-shopeat-looks-like","text":"Coming soon...","title":"What does ShopEat looks like?"},{"location":"components/architecture/","text":"ShopEat Architecture Micro-Services Database schemas","title":"ShopEat Architecture"},{"location":"components/architecture/#shopeat-architecture","text":"","title":"ShopEat Architecture"},{"location":"components/architecture/#micro-services","text":"","title":"Micro-Services"},{"location":"components/architecture/#database-schemas","text":"","title":"Database schemas"},{"location":"components/configuration/","text":"To configure ShopEat components, you first need to select a configuration loader Configuration key format Configuration key should be lowercased, and nested properties dot-separated. For example URL of a database could be: sqlalchemy.database.url Configuration loaders Configuration loader determines how to get value of a given key. Its role is to provide a pluggable way to change configuration source like environment variables, hashicorp vault, etc... Loader Description EnvironmentConfigLoader Default . Load configuration key from environment variables. A key named shopeat.amqp_broker.url will lookup for an environment variable named SHOPEAT_AMQP_BROKER_URL Components configuration Each components defines unique configuration keys and plugins. Have a look at components configuration page for more details: API configuration Notifier configuration","title":"Configuration"},{"location":"components/configuration/#configuration-key-format","text":"Configuration key should be lowercased, and nested properties dot-separated. For example URL of a database could be: sqlalchemy.database.url","title":"Configuration key format"},{"location":"components/configuration/#configuration-loaders","text":"Configuration loader determines how to get value of a given key. Its role is to provide a pluggable way to change configuration source like environment variables, hashicorp vault, etc... Loader Description EnvironmentConfigLoader Default . Load configuration key from environment variables. A key named shopeat.amqp_broker.url will lookup for an environment variable named SHOPEAT_AMQP_BROKER_URL","title":"Configuration loaders"},{"location":"components/configuration/#components-configuration","text":"Each components defines unique configuration keys and plugins. Have a look at components configuration page for more details: API configuration Notifier configuration","title":"Components configuration"},{"location":"components/api/","text":"What is API?","title":"What is API?"},{"location":"components/api/#what-is-api","text":"","title":"What is API?"},{"location":"components/api/configuration/","text":"API Configuration Have a look at general configuration section to understand how to set configuration key, and select a configuration source. Mandatory configuration Key Description shopeat.amqp_broker.url URL of the AMQP broker (generally rabbitmq) that handle queuing of notifications coming from API shopeat.database.url SQL database connection URL, as used by SQLAlchemy shopeat.jwt.secret Secret string used to encode JWT using Plugins Coming soon...","title":"API Configuration"},{"location":"components/api/configuration/#api-configuration","text":"Have a look at general configuration section to understand how to set configuration key, and select a configuration source.","title":"API Configuration"},{"location":"components/api/configuration/#mandatory-configuration","text":"Key Description shopeat.amqp_broker.url URL of the AMQP broker (generally rabbitmq) that handle queuing of notifications coming from API shopeat.database.url SQL database connection URL, as used by SQLAlchemy shopeat.jwt.secret Secret string used to encode JWT using","title":"Mandatory configuration"},{"location":"components/api/configuration/#plugins","text":"Coming soon...","title":"Plugins"},{"location":"components/api/reference/","text":"ShopEat API reference .info { display: none } .md-sidebar--secondary { display: none !important; }","title":"ShopEat API reference"},{"location":"components/api/reference/#shopeat-api-reference","text":".info { display: none } .md-sidebar--secondary { display: none !important; }","title":"ShopEat API reference"},{"location":"components/notifier/","text":"What is Notifier?","title":"What is Notifier?"},{"location":"components/notifier/#what-is-notifier","text":"","title":"What is Notifier?"},{"location":"components/notifier/configuration/","text":"Notifier Configuration Mandatory configuration Variable Description SHOPEAT_JWT_SECRET String used to encode JWT (format of access tokens) SHOPEAT_AMQP_BROKER_URL URL of the AMQP broker used to receive notifications from API Plugins Coming soon...","title":"Notifier Configuration"},{"location":"components/notifier/configuration/#notifier-configuration","text":"","title":"Notifier Configuration"},{"location":"components/notifier/configuration/#mandatory-configuration","text":"Variable Description SHOPEAT_JWT_SECRET String used to encode JWT (format of access tokens) SHOPEAT_AMQP_BROKER_URL URL of the AMQP broker used to receive notifications from API","title":"Mandatory configuration"},{"location":"components/notifier/configuration/#plugins","text":"Coming soon...","title":"Plugins"},{"location":"deploy/docker/","text":"Deploy with Docker ShopEat official image ShopEat is distributed as a single docker image with multiple entrypoints. So in order to run multiple components: Start by downloading ShopEat docker image docker pull sylvanld/shopeat:{imageTag} Have a look at dockerhub to find available image tags . Then deploy choosen component by specifying a command to the entrypoint docker run sylvanld/shopeat api-start Usage with docker-compose version : \"3.6\" services : shopeat-api : image : sylvanld/shopeat command : api-start environment : SHOPEAT_API_HOST : \"0.0.0.0\" SHOPEAT_API_PORT : 8000 SHOPEAT_AMQP_BROKER_URL : amqp://rabbit:password@rabbitmq SHOPEAT_JWT_SECRET : tartampion SHOPEAT_DATABASE_URL : \"postgresql+asyncpg://postgres:password@database/shopeat\" ports : - 8000:8000 shopeat-notifier : image : sylvanld/shopeat command : notifier-start environment : SHOPEAT_NOTIFIER_HOST : 0.0.0.0 SHOPEAT_NOTIFIER_PORT : 7000 SHOPEAT_JWT_SECRET : tartampion SHOPEAT_AMQP_BROKER_URL : amqp://rabbit:password@rabbitmq ports : - 7000:7000 restart : always database : image : postgres:alpine3.17 ports : - 5432:5432 environment : POSTGRES_USER : postgres POSTGRES_PASSWORD : password restart : always rabbitmq : image : rabbitmq:3-management ports : - 5672:5672 - 15672:15672 environment : RABBITMQ_DEFAULT_USER : rabbit RABBITMQ_DEFAULT_PASS : password restart : always","title":"Deploy with Docker"},{"location":"deploy/docker/#deploy-with-docker","text":"","title":"Deploy with Docker"},{"location":"deploy/docker/#shopeat-official-image","text":"ShopEat is distributed as a single docker image with multiple entrypoints. So in order to run multiple components: Start by downloading ShopEat docker image docker pull sylvanld/shopeat:{imageTag} Have a look at dockerhub to find available image tags . Then deploy choosen component by specifying a command to the entrypoint docker run sylvanld/shopeat api-start","title":"ShopEat official image"},{"location":"deploy/docker/#usage-with-docker-compose","text":"version : \"3.6\" services : shopeat-api : image : sylvanld/shopeat command : api-start environment : SHOPEAT_API_HOST : \"0.0.0.0\" SHOPEAT_API_PORT : 8000 SHOPEAT_AMQP_BROKER_URL : amqp://rabbit:password@rabbitmq SHOPEAT_JWT_SECRET : tartampion SHOPEAT_DATABASE_URL : \"postgresql+asyncpg://postgres:password@database/shopeat\" ports : - 8000:8000 shopeat-notifier : image : sylvanld/shopeat command : notifier-start environment : SHOPEAT_NOTIFIER_HOST : 0.0.0.0 SHOPEAT_NOTIFIER_PORT : 7000 SHOPEAT_JWT_SECRET : tartampion SHOPEAT_AMQP_BROKER_URL : amqp://rabbit:password@rabbitmq ports : - 7000:7000 restart : always database : image : postgres:alpine3.17 ports : - 5432:5432 environment : POSTGRES_USER : postgres POSTGRES_PASSWORD : password restart : always rabbitmq : image : rabbitmq:3-management ports : - 5672:5672 - 15672:15672 environment : RABBITMQ_DEFAULT_USER : rabbit RABBITMQ_DEFAULT_PASS : password restart : always","title":"Usage with docker-compose"},{"location":"deploy/kubernetes/","text":"Deploy on Kubernetes Coming soon...","title":"Deploy on Kubernetes"},{"location":"deploy/kubernetes/#deploy-on-kubernetes","text":"Coming soon...","title":"Deploy on Kubernetes"}]}